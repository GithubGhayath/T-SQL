--Example 1:
	
DECLARE @Counter INT = 1;

	--This loop prints numbers from 1 to 5.
	WHILE @Counter <= 5
	BEGIN
		PRINT 'Count: ' + CAST(@Counter AS VARCHAR);
		SET @Counter = @Counter + 1;
	END

	Print '';
	Print 'Revered Counter';

	--This loop prints numbers from 5 to 1.
	set @Counter= 5;

	WHILE @Counter > 0
	BEGIN
		PRINT 'Count: ' + CAST(@Counter AS VARCHAR);
		SET @Counter = @Counter - 1;
	END




--Example 2:Iterating Over a Table

use C21_DB1;

--This loop iterates over each employee in the Employees table.

DECLARE @EmployeeID INT;
DECLARE @Name varchar(50);
DECLARE @MaxID INT;

-- Initialize the starting point
SELECT @EmployeeID = MIN(EmployeeID) FROM Employees;

-- Find the maximum EmployeeID
SELECT @MaxID = MAX(EmployeeID) FROM Employees;

-- Loop through employees
WHILE @EmployeeID IS NOT NULL AND @EmployeeID <= @MaxID
BEGIN
    -- Perform an operation, e.g., print employee's name
    SELECT @Name=Name FROM Employees WHERE EmployeeID = @EmployeeID;
	PRINT @Name;

    -- Get the next EmployeeID
    SELECT @EmployeeID = MIN(EmployeeID) FROM Employees WHERE EmployeeID > @EmployeeID;

END



--03 Example 3 - Loop with Conditional Exit

DECLARE @Balance DECIMAL(10, 2) = 950.00; -- Example balance
DECLARE @Withdrawal DECIMAL(10, 2) = 100.00; -- Withdrawal amount

--Loop with Conditional Exit
WHILE @Balance > 0
BEGIN
    -- Perform a withdrawal
    SET @Balance = @Balance - @Withdrawal;

    IF @Balance < 0
		BEGIN
			PRINT 'Insufficient funds for withdrawal.';
			BREAK;
		END

    PRINT 'New Balance: ' + CAST(@Balance AS VARCHAR);
END



--Example 4 - Nested While Loops - 10 x 10 Multiplication Table

DECLARE @row INT = 1;
-- Example 4 - Nested While Loops - 10 x 10 Multiplication Table
DECLARE @col INT;
DECLARE @result INT;

WHILE @row <= 10
BEGIN
    SET @col = 1;
    WHILE @col <= 10
    BEGIN
        SET @result = @row * @col;
        PRINT CAST(@row AS VARCHAR) + ' x ' + CAST(@col AS VARCHAR) + ' = ' + CAST(@result AS VARCHAR);
        SET @col = @col + 1;
    END
    SET @row = @row + 1;
END


--Example 5 - 10 x 10 Matrix Multiplication Table

-- 10 x 10 Matrix Multiplication Table

DECLARE @row INT = 1;
DECLARE @col INT;
DECLARE @result INT;
DECLARE @rowString VARCHAR(255);
DECLARE @headerString VARCHAR(255);

-- Create the header row for the columns
SET @headerString = CHAR(9); -- Starting with a tab for the row header space
SET @col = 1;
WHILE @col <= 10
BEGIN
    SET @headerString = @headerString + CAST(@col AS VARCHAR) + CHAR(9); -- Append column headers
    SET @col = @col + 1;
END
PRINT @headerString;

-- Generate the multiplication table
WHILE @row <= 10
BEGIN
    SET @col = 1;
    SET @rowString = CAST(@row AS VARCHAR) + CHAR(9); -- Start each row with the row number

    WHILE @col <= 10
    BEGIN
        SET @result = @row * @col;
        SET @rowString = @rowString + CAST(@result AS VARCHAR) + CHAR(9); -- Append multiplication results
        SET @col = @col + 1;
    END

    PRINT @rowString; -- Print the row
    SET @row = @row + 1;
END

--Example 6 - BREAK and CONTINUE Statements


DECLARE @counter INT = 1;

--Break Example
--This loop will print numbers from 1 to 5. When the counter reaches 5, the BREAK statement exits the loop.
 PRINT 'Break Example: ' ;
WHILE @counter <= 10
BEGIN
    PRINT 'Counter: ' + CAST(@counter AS VARCHAR);
    IF @counter = 5
    BEGIN
        BREAK; -- Exits the loop when counter reaches 5
    END
    SET @counter = @counter + 1;
END


--This loop will print only odd numbers between 1 and 10. When the counter is even, the CONTINUE statement skips to the next iteration.
PRINT '' ;
PRINT 'Continue Example: ' ;
set @counter=1;


WHILE @counter <= 10
BEGIN
    SET @counter = @counter + 1;
    IF @counter % 2 = 0
    BEGIN
        CONTINUE; -- Skips the current iteration for even numbers
    END
    PRINT 'Counter: ' + CAST(@counter AS VARCHAR);
END


